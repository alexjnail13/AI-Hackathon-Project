<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Interview Simulator</title>
    <style>
        :root {
            --primary: #8B5CF6;
            --secondary: #EC4899;
            --accent: #10B981;
            --background: #F1F5F9;
            --text: #0F172A;
            --white: #FFFFFF;
            --gray-100: #F8FAFC;
            --gray-200: #E2E8F0;
            --gray-600: #64748B;
            --success: #10B981;
            --warning: #F59E0B;
            --error: #EF4444;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            min-height: 100vh;
            padding: 20px;
            color: var(--text);
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: var(--white);
            border-radius: 24px;
            box-shadow: 0 25px 50px rgba(139, 92, 246, 0.2);
            overflow: hidden;
            animation: slideIn 0.6s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: var(--white);
            padding: 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="40" r="3" fill="rgba(255,255,255,0.1)"/><circle cx="40" cy="80" r="1" fill="rgba(255,255,255,0.1)"/></svg>');
            animation: float 20s infinite linear;
        }

        @keyframes float {
            from { transform: translateX(-100px); }
            to { transform: translateX(100vw); }
        }

        .header-content {
            position: relative;
            z-index: 2;
        }
        
        .header h1 {
            font-size: 3rem;
            margin-bottom: 15px;
            font-weight: 800;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .header p {
            font-size: 1.3rem;
            opacity: 0.9;
            font-weight: 300;
        }
        
        .content {
            padding: 50px;
        }
        
        .setup-form {
            display: block;
        }
        
        .interview-area {
            display: none;
        }
        
        .form-group {
            margin-bottom: 30px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: var(--text);
            font-size: 1.1rem;
        }
        
        .form-group input, 
        .form-group select {
            width: 100%;
            padding: 16px;
            border: 2px solid var(--gray-200);
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: var(--background);
            color: var(--text);
        }
        
        .form-group input:focus, 
        .form-group select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            background: var(--white);
        }

        .form-group small {
            display: block;
            margin-top: 8px;
            color: var(--gray-600);
            font-size: 0.9rem;
        }

        .form-group small a {
            color: var(--primary);
            text-decoration: none;
        }

        .form-group small a:hover {
            text-decoration: underline;
        }
        
        .btn {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: var(--white);
            border: none;
            padding: 18px 35px;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3);
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(139, 92, 246, 0.4);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: 0 4px 15px rgba(139, 92, 246, 0.1);
        }

        .btn:disabled:hover {
            transform: none;
        }
        
        .question-card {
            background: var(--background);
            border-left: 6px solid var(--primary);
            padding: 35px;
            margin: 25px 0;
            border-radius: 16px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }

        .question-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }
        
        .question-number {
            color: var(--primary);
            font-weight: 700;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 15px;
        }
        
        .question-text {
            font-size: 1.3rem;
            color: var(--text);
            line-height: 1.6;
            font-weight: 500;
        }
        
        .answer-area {
            margin: 30px 0;
        }

        .answer-area label {
            display: block;
            margin-bottom: 12px;
            font-weight: 600;
            color: var(--text);
            font-size: 1.1rem;
        }
        
        .answer-input {
            width: 100%;
            min-height: 150px;
            padding: 20px;
            border: 2px solid var(--gray-200);
            border-radius: 12px;
            font-size: 16px;
            font-family: inherit;
            resize: vertical;
            line-height: 1.6;
            transition: all 0.3s ease;
            background: var(--background);
        }

        .answer-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            background: var(--white);
        }
        
        .speech-controls {
            display: flex;
            gap: 20px;
            margin: 25px 0;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .speech-btn {
            background: var(--error);
            color: var(--white);
            border: none;
            padding: 14px 24px;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
        }
        
        .speech-btn:hover {
            background: #DC2626;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
        }
        
        .speech-btn.listening {
            background: var(--accent);
            animation: pulse 1.5s infinite;
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
        }

        .speech-btn.listening:hover {
            background: #059669;
        }
        
        @keyframes pulse {
            0% { opacity: 1; box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4); }
            50% { opacity: 0.8; box-shadow: 0 4px 25px rgba(16, 185, 129, 0.6); }
            100% { opacity: 1; box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4); }
        }

        .speech-status {
            font-size: 1rem;
            color: var(--gray-600);
            font-weight: 500;
        }
        
        .feedback-card {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: var(--white);
            padding: 35px;
            border-radius: 16px;
            margin: 25px 0;
            box-shadow: 0 10px 30px rgba(139, 92, 246, 0.3);
            text-align: center;
            transform: scale(0);
            transition: all 0.5s ease;
        }

        .feedback-card.show {
            transform: scale(1);
        }
        
        .score {
            font-size: 3rem;
            font-weight: 800;
            margin-bottom: 20px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .feedback-text {
            font-size: 1.2rem;
            line-height: 1.6;
            opacity: 0.95;
        }
        
        .progress-container {
            margin: 20px 0;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .progress-label span {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text);
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background: var(--gray-200);
            border-radius: 5px;
            overflow: hidden;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            border-radius: 5px;
            transition: width 0.8s ease;
            position: relative;
        }

        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        .controls {
            display: flex;
            gap: 15px;
            margin: 30px 0;
            flex-wrap: wrap;
        }
        
        .btn-secondary {
            background: var(--gray-600);
            color: var(--white);
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-secondary:hover {
            background: #475569;
            transform: translateY(-1px);
        }

        .btn-outline {
            background: transparent;
            color: var(--primary);
            border: 2px solid var(--primary);
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-outline:hover {
            background: var(--primary);
            color: var(--white);
            transform: translateY(-1px);
        }
        
        .status-indicator {
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 20px 0;
            padding: 16px 20px;
            background: var(--gray-100);
            border-radius: 12px;
            font-size: 1rem;
            border: 1px solid var(--gray-200);
        }
        
        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: var(--accent);
            animation: breathe 2s infinite;
        }

        @keyframes breathe {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .status-text {
            font-weight: 600;
            color: var(--text);
        }

        .status-counter {
            margin-left: auto;
            font-weight: 600;
            color: var(--primary);
        }
        
        .hidden {
            display: none;
        }

        .results-container {
            text-align: center;
            padding: 50px 30px;
        }

        .results-title {
            font-size: 2.5rem;
            color: var(--primary);
            margin-bottom: 25px;
            font-weight: 800;
        }

        .results-card {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: var(--white);
            padding: 40px;
            border-radius: 20px;
            margin: 30px 0;
            box-shadow: 0 15px 40px rgba(139, 92, 246, 0.3);
        }

        .results-summary {
            margin: 30px 0;
            padding: 30px;
            background: var(--background);
            border-radius: 16px;
            border: 1px solid var(--gray-200);
        }

        .results-summary h3 {
            margin-bottom: 20px;
            color: var(--text);
            font-size: 1.4rem;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding: 8px 0;
            border-bottom: 1px solid var(--gray-200);
        }

        .summary-item:last-child {
            border-bottom: none;
        }

        .summary-label {
            font-weight: 600;
            color: var(--text);
        }

        .summary-value {
            color: var(--primary);
            font-weight: 600;
        }

        .results-actions {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 30px;
        }

        /* Microphone icon */
        .mic-icon {
            width: 16px;
            height: 16px;
            display: inline-block;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 20px;
            }
            
            .content {
                padding: 30px 25px;
            }
            
            .header {
                padding: 30px 25px;
            }
            
            .header h1 {
                font-size: 2.2rem;
            }
            
            .controls {
                flex-direction: column;
            }

            .speech-controls {
                flex-direction: column;
                align-items: stretch;
            }

            .results-actions {
                flex-direction: column;
            }
        }

        /* Loading animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: var(--white);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-content">
                <h1>AI Interview Simulator</h1>
                <p>Practice interviews with AI-powered feedback and voice recognition</p>
            </div>
        </div>
        
        <div class="content">
            <!-- Setup Form -->
            <div class="setup-form" id="setupForm">
                <div class="form-group">
                    <label for="candidateName">Your Name</label>
                    <input type="text" id="candidateName" placeholder="Enter your full name" required>
                </div>
                
                <div class="form-group">
                    <label for="position">Position</label>
                    <input type="text" id="position" placeholder="e.g., Software Engineer, Marketing Manager" required>
                </div>
                
                <div class="form-group">
                    <label for="interviewType">Interview Type</label>
                    <select id="interviewType" required>
                        <option value="">Select interview type</option>
                        <option value="behavioral">Behavioral (STAR method)</option>
                        <option value="technical">Technical</option>
                        <option value="general">General</option>
                        <option value="leadership">Leadership</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="apiKey">Gemini API Key (Optional)</label>
                    <input type="password" id="apiKey" placeholder="Enter your Gemini API key for AI features">
                    <small>Get your free API key from <a href="https://ai.google.dev" target="_blank">Google AI Studio</a>. Without an API key, demo questions will be used.</small>
                </div>
                
                <button class="btn" onclick="startInterview()">
                    <span id="startBtnText">Start Interview</span>
                </button>
            </div>
            
            <!-- Interview Area -->
            <div class="interview-area" id="interviewArea">
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <span class="status-text">Interview in progress</span>
                    <span class="status-counter" id="questionCounter">Question 1 of 10</span>
                </div>
                
                <div class="progress-container">
                    <div class="progress-label">
                        <span>Progress</span>
                        <span id="progressPercent">10%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill" style="width: 10%"></div>
                    </div>
                </div>
                
                <div class="question-card">
                    <div class="question-number" id="questionNumber">Question 1</div>
                    <div class="question-text" id="questionText">Loading your personalized question...</div>
                </div>
                
                <div class="answer-area">
                    <label for="answerInput">Your Answer:</label>
                    <textarea 
                        id="answerInput" 
                        class="answer-input" 
                        placeholder="Type your answer here or use voice input below..."></textarea>
                    
                    <div class="speech-controls">
                        <button class="speech-btn" id="speechBtn" onclick="toggleSpeech()">
                            <svg class="mic-icon" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
                            </svg>
                            <span id="speechBtnText">Start Recording</span>
                        </button>
                        <span class="speech-status" id="speechStatus">Click to start voice input</span>
                    </div>
                </div>
                
                <div class="controls">
                    <button class="btn" onclick="submitAnswer()" id="submitBtn">Submit Answer</button>
                    <button class="btn-secondary" onclick="skipQuestion()">Skip Question</button>
                    <button class="btn-outline" onclick="endInterview()">End Interview</button>
                </div>
                
                <div class="feedback-card hidden" id="feedbackCard">
                    <div class="score" id="scoreDisplay">8/10</div>
                    <div class="feedback-text" id="feedbackText">Great answer! You provided specific examples and showed clear problem-solving skills.</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Interview state
        let currentQuestion = 1;
        let totalQuestions = 10;
        let responses = [];
        let isRecording = false;
        let recognition = null;
        let candidateData = {};
        let speechSupported = false;
        
        // Sample questions for demo (in real app, these come from AI)
        const sampleQuestions = {
            behavioral: [
                "Tell me about yourself and your background.",
                "Describe a challenging situation you faced at work and how you handled it.",
                "Tell me about a time you had to work with a difficult team member.",
                "Give me an example of when you had to meet a tight deadline.",
                "Describe a time when you made a mistake and how you handled it.",
                "Tell me about a project you're particularly proud of.",
                "How do you handle conflict in the workplace?",
                "Describe a time when you had to learn something new quickly.",
                "Tell me about a time you showed leadership.",
                "Give me an example of when you went above and beyond."
            ],
            technical: [
                "Explain the difference between procedural and object-oriented programming.",
                "How would you optimize database query performance?",
                "Describe your approach to debugging complex issues.",
                "What are the key principles of good software architecture?",
                "How do you ensure code quality in your projects?",
                "Explain your experience with version control systems.",
                "Describe a technical challenge you recently solved.",
                "How do you stay updated with new technologies?",
                "What testing strategies do you employ?",
                "Explain your approach to code reviews."
            ],
            general: [
                "Why are you interested in this position?",
                "What are your greatest strengths?",
                "What is your biggest weakness?",
                "Where do you see yourself in 5 years?",
                "Why are you leaving your current job?",
                "What motivates you in your work?",
                "How do you handle stress and pressure?",
                "What salary range are you expecting?",
                "Do you have any questions for us?",
                "Why should we hire you?"
            ],
            leadership: [
                "Describe your leadership style.",
                "Tell me about a time you had to motivate a demotivated team.",
                "How do you handle underperforming team members?",
                "Describe a difficult decision you had to make as a leader.",
                "How do you manage competing priorities across teams?",
                "Tell me about a time you had to implement change in your organization.",
                "How do you build trust with your team?",
                "Describe your approach to giving feedback.",
                "How do you handle disagreements with upper management?",
                "What's your strategy for developing team members?"
            ]
        };
        
        // Initialize speech recognition
        function initSpeechRecognition() {
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                recognition = new SpeechRecognition();
                
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'en-US';
                recognition.maxAlternatives = 1;
                
                recognition.onstart = function() {
                    isRecording = true;
                    updateSpeechButton();
                    document.getElementById('speechStatus').textContent = 'Listening... Speak clearly!';
                    document.getElementById('speechStatus').style.color = 'var(--accent)';
                };
                
                recognition.onresult = function(event) {
                    const transcript = event.results[0][0].transcript;
                    const currentText = document.getElementById('answerInput').value;
                    const newText = currentText + (currentText ? ' ' : '') + transcript;
                    document.getElementById('answerInput').value = newText;
                    
                    document.getElementById('speechStatus').textContent = `Added: "${transcript}"`;
                    document.getElementById('speechStatus').style.color = 'var(--accent)';
                };
                
                recognition.onerror = function(event) {
                    console.error('Speech recognition error:', event.error);
                    let errorMessage = 'Speech recognition error';
                    
                    switch(event.error) {
                        case 'no-speech':
                            errorMessage = 'No speech detected. Try again.';
                            break;
                        case 'audio-capture':
                            errorMessage = 'Microphone not accessible.';
                            break;
                        case 'not-allowed':
                            errorMessage = 'Microphone permission denied.';
                            break;
                        case 'network':
                            errorMessage = 'Network error. Check connection.';
                            break;
                        default:
                            errorMessage = `Error: ${event.error}`;
                    }
                    
                    document.getElementById('speechStatus').textContent = errorMessage;
                    document.getElementById('speechStatus').style.color = 'var(--error)';
                    stopRecording();
                };
                
                recognition.onend = function() {
                    isRecording = false;
                    updateSpeechButton();
                    
                    setTimeout(() => {
                        if (document.getElementById('speechStatus').style.color !== 'var(--error)') {
                            document.getElementById('speechStatus').textContent = 'Click to start voice input';
                            document.getElementById('speechStatus').style.color = 'var(--gray-600)';
                        }
                    }, 3000);
                };
                
                speechSupported = true;
                return true;
            }
            speechSupported = false;
            return false;
        }
        
        function toggleSpeech() {
            if (!speechSupported) {
                alert('Speech recognition is not supported in your browser. Please use Chrome, Edge, or Safari, and ensure you have microphone permissions.');
                return;
            }

            if (!recognition) {
                if (!initSpeechRecognition()) {
                    alert('Failed to initialize speech recognition. Please check your microphone permissions.');
                    return;
                }
            }
            
            if (isRecording) {
                stopRecording();
            } else {
                startRecording();
            }
        }
        
        function startRecording() {
            try {
                recognition.start();
            } catch (error) {
                console.error('Failed to start speech recognition:', error);
                document.getElementById('speechStatus').textContent = 'Failed to start recording. Try again.';
                document.getElementById('speechStatus').style.color = 'var(--error)';
            }
        }
        
        function stopRecording() {
            if (recognition) {
                recognition.stop();
            }
        }
        
        function updateSpeechButton() {
            const btn = document.getElementById('speechBtn');
            const btnText = document.getElementById('speechBtnText');
            
            if (isRecording) {
                btnText.textContent = 'Stop Recording';
                btn.classList.add('listening');
            } else {
                btnText.textContent = 'Start Recording';
                btn.classList.remove('listening');
            }
        }
        
        function startInterview() {
            const name = document.getElementById('candidateName').value.trim();
            const position = document.getElementById('position').value.trim();
            const interviewType = document.getElementById('interviewType').value;
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!name || !position || !interviewType) {
                alert('Please fill in all required fields');
                return;
            }
            
            candidateData = { name, position, interviewType, apiKey };
            
            // Show loading state
            const startBtn = document.getElementById('startBtnText');
            const originalText = startBtn.textContent;
            startBtn.innerHTML = '<span class="loading"></span> Initializing...';
            
            setTimeout(() => {
                document.getElementById('setupForm').style.display = 'none';
                document.getElementById('interviewArea').style.display = 'block';
                
                // Initialize speech recognition
                initSpeechRecognition();
                
                // Load first question
                loadQuestion();
                
                startBtn.innerHTML = originalText;
            }, 1500);
        }
        
        function loadQuestion() {
            const questionText = document.getElementById('questionText');
            const questionNumber = document.getElementById('questionNumber');
            const questionCounter = document.getElementById('questionCounter');
            
            // Get questions based on interview type
            const questionsArray = sampleQuestions[candidateData.interviewType] || sampleQuestions.general;
            const question = questionsArray[currentQuestion - 1];
            
            questionText.textContent = question;
            questionNumber.textContent = `Question ${currentQuestion}`;
            questionCounter.textContent = `Question ${currentQuestion} of ${totalQuestions}`;
            
            // Update progress
            const progress = (currentQuestion / totalQuestions) * 100;
            document.getElementById('progressFill').style.width = progress + '%';
            document.getElementById('progressPercent').textContent = Math.round(progress) + '%';
            
            // Clear previous answer and feedback
            document.getElementById('answerInput').value = '';
            const feedbackCard = document.getElementById('feedbackCard');
            feedbackCard.classList.remove('show');
            feedbackCard.classList.add('hidden');
            
            // Reset speech status
            document.getElementById('speechStatus').textContent = 'Click to start voice input';
            document.getElementById('speechStatus').style.color = 'var(--gray-600)';
        }
        
        function submitAnswer() {
            const answer = document.getElementById('answerInput').value.trim();
            
            if (!answer) {
                alert('Please provide an answer before submitting');
                return;
            }
            
            // Stop recording if active
            if (isRecording) {
                stopRecording();
            }
            
            // Show loading state
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.textContent;
            submitBtn.innerHTML = '<span class="loading"></span> Analyzing...';
            submitBtn.disabled = true;
            
            // Store response
            const questionsArray = sampleQuestions[candidateData.interviewType] || sampleQuestions.general;
            responses.push({
                question: questionsArray[currentQuestion - 1],
                answer: answer,
                timestamp: new Date().toISOString(),
                questionNumber: currentQuestion
            });
            
            // Simulate AI feedback processing
            setTimeout(() => {
                showFeedback();
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                
                // Auto-advance after showing feedback
                setTimeout(() => {
                    nextQuestion();
                }, 4000);
            }, 2000);
        }
        
        function showFeedback() {
            const feedbackCard = document.getElementById('feedbackCard');
            const scoreDisplay = document.getElementById('scoreDisplay');
            const feedbackText = document.getElementById('feedbackText');
            
            // Generate realistic feedback based on answer length and content
            const answer = responses[responses.length - 1].answer;
            const wordCount = answer.split(/\s+/).length;
            
            let score = 7; // Base score
            let feedback = "Good response!";
            
            // Adjust score based on answer quality indicators
            if (wordCount > 100) score += 1;
            if (wordCount > 200) score += 0.5;
            if (answer.toLowerCase().includes('example') || answer.toLowerCase().includes('for instance')) score += 0.5;
            if (answer.toLowerCase().includes('result') || answer.toLowerCase().includes('outcome')) score += 0.5;
            
            // Cap at 10
            score = Math.min(score, 10);
            
            // Generate contextual feedback
            const feedbacks = [
                "Excellent answer! You provided specific examples and demonstrated clear problem-solving skills. Your response shows strong communication abilities.",
                "Great response! Your answer is well-structured and shows relevant experience. Consider adding more quantifiable results to strengthen your impact.",
                "Well-structured answer! You followed a logical flow and provided good context. Try to include more specific metrics or outcomes next time.",
                "Good answer! Your experience comes through clearly. Consider using the STAR method (Situation, Task, Action, Result) for even stronger responses.",
                "Solid response! You addressed the question effectively. Adding more concrete examples would make your answer even more compelling.",
                "Nice response! Your enthusiasm and knowledge are evident. Focus on being more specific about your role and contributions.",
                "Good answer! You demonstrated relevant skills well. Consider elaborating on the impact or results of your actions.",
                "Well done! Your answer shows good self-awareness. Try to provide more detailed examples to illustrate your points.",
                "Strong response! You communicated your experience clearly. Adding measurable outcomes would enhance your answer further.",
                "Effective answer! Your approach to the situation was well-explained. Consider including what you learned from the experience."
            ];
            
            scoreDisplay.textContent = `${score.toFixed(1)}/10`;
            feedbackText.textContent = feedbacks[Math.floor(Math.random() * feedbacks.length)];
            
            // Show feedback with animation
            feedbackCard.classList.remove('hidden');
            setTimeout(() => {
                feedbackCard.classList.add('show');
            }, 100);
        }
        
        function skipQuestion() {
            if (currentQuestion === 1) {
                if (!confirm('Are you sure you want to skip the first question?')) {
                    return;
                }
            }
            
            // Store skipped response
            const questionsArray = sampleQuestions[candidateData.interviewType] || sampleQuestions.general;
            responses.push({
                question: questionsArray[currentQuestion - 1],
                answer: "[Skipped]",
                timestamp: new Date().toISOString(),
                questionNumber: currentQuestion,
                skipped: true
            });
            
            nextQuestion();
        }
        
        function nextQuestion() {
            currentQuestion++;
            
            if (currentQuestion > totalQuestions) {
                finishInterview();
            } else {
                loadQuestion();
            }
        }
        
        function endInterview() {
            const answeredQuestions = responses.length;
            if (answeredQuestions === 0) {
                alert('You haven\'t answered any questions yet. Start the interview first!');
                return;
            }
            
            if (confirm(`Are you sure you want to end the interview? You've answered ${answeredQuestions} out of ${totalQuestions} questions.`)) {
                finishInterview();
            }
        }
        
        function finishInterview() {
            // Stop any active recording
            if (isRecording) {
                stopRecording();
            }
            
            // Calculate results
            const answeredQuestions = responses.filter(r => !r.skipped).length;
            const skippedQuestions = responses.filter(r => r.skipped).length;
            const totalWords = responses.filter(r => !r.skipped).reduce((total, r) => {
                return total + r.answer.split(/\s+/).length;
            }, 0);
            const avgWordsPerAnswer = answeredQuestions > 0 ? Math.round(totalWords / answeredQuestions) : 0;
            
            // Generate overall score (demo calculation)
            let overallScore = 7.5;
            if (answeredQuestions >= 8) overallScore += 0.5;
            if (avgWordsPerAnswer > 75) overallScore += 0.5;
            if (skippedQuestions === 0) overallScore += 0.5;
            overallScore = Math.min(overallScore, 10);
            
            // Show results
            const content = document.querySelector('.content');
            content.innerHTML = `
                <div class="results-container">
                    <h2 class="results-title">Interview Complete!</h2>
                    
                    <div class="results-card">
                        <div class="score">${overallScore.toFixed(1)}/10</div>
                        <div class="feedback-text">
                            Congratulations, ${candidateData.name}! You've completed your ${candidateData.interviewType} interview practice for the ${candidateData.position} position.
                        </div>
                    </div>
                    
                    <div class="results-summary">
                        <h3>Interview Summary</h3>
                        <div class="summary-item">
                            <span class="summary-label">Questions Answered:</span>
                            <span class="summary-value">${answeredQuestions}</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Questions Skipped:</span>
                            <span class="summary-value">${skippedQuestions}</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Interview Type:</span>
                            <span class="summary-value">${candidateData.interviewType.charAt(0).toUpperCase() + candidateData.interviewType.slice(1)}</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Target Position:</span>
                            <span class="summary-value">${candidateData.position}</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Average Words per Answer:</span>
                            <span class="summary-value">${avgWordsPerAnswer}</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Speech Recognition Used:</span>
                            <span class="summary-value">${speechSupported ? 'Available' : 'Not Available'}</span>
                        </div>
                    </div>
                    
                    <div class="results-actions">
                        <button class="btn" onclick="downloadResults()">Download Results</button>
                        <button class="btn-secondary" onclick="location.reload()">New Interview</button>
                        <button class="btn-outline" onclick="showDetailedResults()">View Details</button>
                    </div>
                </div>
            `;
        }
        
        function downloadResults() {
            const results = {
                candidate: candidateData,
                interviewMetadata: {
                    completedAt: new Date().toISOString(),
                    totalQuestionsAnswered: responses.filter(r => !r.skipped).length,
                    totalQuestionsSkipped: responses.filter(r => r.skipped).length,
                    overallScore: 8.2, // Demo value
                    interviewDuration: `${Math.floor(Math.random() * 20) + 15} minutes`
                },
                responses: responses,
                summary: {
                    strengths: [
                        "Clear communication style",
                        "Good use of specific examples",
                        "Structured responses"
                    ],
                    improvements: [
                        "Include more quantifiable results",
                        "Use STAR method consistently",
                        "Elaborate on lessons learned"
                    ]
                }
            };
            
            const blob = new Blob([JSON.stringify(results, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `interview_results_${candidateData.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
        
        function showDetailedResults() {
            const content = document.querySelector('.content');
            let detailsHTML = `
                <div class="results-container">
                    <h2 class="results-title">Detailed Interview Results</h2>
                    
                    <div class="results-summary">
                        <h3>Question-by-Question Breakdown</h3>
            `;
            
            responses.forEach((response, index) => {
                const wordCount = response.skipped ? 0 : response.answer.split(/\s+/).length;
                detailsHTML += `
                    <div style="margin-bottom: 25px; padding: 20px; background: var(--background); border-radius: 12px; border-left: 4px solid var(--primary);">
                        <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 10px;">
                            <strong>Question ${response.questionNumber}</strong>
                            <span style="color: var(--gray-600); font-size: 0.9rem;">${wordCount} words</span>
                        </div>
                        <p style="margin-bottom: 15px; font-style: italic; color: var(--gray-600);">${response.question}</p>
                        <p style="line-height: 1.6;">${response.skipped ? '<em>Question was skipped</em>' : response.answer}</p>
                    </div>
                `;
            });
            
            detailsHTML += `
                    </div>
                    
                    <div class="results-actions">
                        <button class="btn" onclick="downloadResults()">Download Results</button>
                        <button class="btn-secondary" onclick="location.reload()">New Interview</button>
                    </div>
                </div>
            `;
            
            content.innerHTML = detailsHTML;
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('AI Interview Simulator loaded successfully');
            
            // Test speech recognition availability
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                console.log('Speech recognition is supported');
            } else {
                console.log('Speech recognition is not supported in this browser');
                // You could show a warning message here
            }
            
            // Add keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Ctrl/Cmd + Enter to submit answer
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                    const submitBtn = document.getElementById('submitBtn');
                    if (submitBtn && !submitBtn.disabled) {
                        submitAnswer();
                    }
                }
                
                // Escape to stop recording
                if (e.key === 'Escape' && isRecording) {
                    stopRecording();
                }
            });
        });
        
        // Handle page visibility changes (stop recording when page is hidden)
        document.addEventListener('visibilitychange', function() {
            if (document.hidden && isRecording) {
                stopRecording();
            }
        });
    </script>
</body>
</html>
